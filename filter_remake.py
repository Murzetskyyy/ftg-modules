# -*- coding: utf-8 -*-


# Original module author: @ftgmodulesbyfl1yd
# Ukrainian translate by @Murzetskyy


from .. import loader, utils
import re

@loader.tds
class FiltersMod(loader.Module):
    """–§—ñ–ª—å—Ç—Ä—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤ —Ç–µ–∫—Å—Ç—ñ —î –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—è —á–∏ –ª–∞—Ç–∏–Ω–∏—Ü—è"""

    strings = {"name": "–§—ñ–ª—å—Ç—Ä–∏"}

    async def client_ready(self, client, db):
        self.db = db

    def normalize_text(self, text):
        """–ó–Ω–∏–∂—É—î —Ä–µ–≥—ñ—Å—Ç—Ä, –ø—Ä–∏–±–∏—Ä–∞—î –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—é, –∑–∞–º—ñ–Ω—é—î –ª–∞—Ç–∏–Ω–∏—Ü—é –Ω–∞ –∫–∏—Ä–∏–ª–∏—Ü—é"""
        replace_map = {
            '–∞': '–∞', 'a': '–∞', 'A': '–∞', '@': '–∞',
            '–µ': '–µ', '—ë': '–µ', 'e': '–µ', 'E': '–µ',
            '–æ': '–æ', '0': '–æ', 'O': '–æ',
            '—Å': '—Å', 'c': '—Å', 'C': '—Å',
            '—Ä': '—Ä', 'p': '—Ä', 'P': '—Ä',
            '—É': '—É', 'y': '—É', 'Y': '—É',
            '–∫': '–∫', 'k': '–∫', 'K': '–∫', 'Íöç': '–∫',
            '—Ö': '—Ö', 'x': '—Ö', 'X': '—Ö',
            '—Ç': '—Ç', 't': '—Ç', 'T': '—Ç', 'œÑ': '—Ç',
            '–Ω': '–Ω', 'h': '–Ω', 'H': '–Ω',
            '–≤': '–≤', 'b': '–≤', 'B': '–≤',
            '–º': '–º', 'm': '–º', 'M': '–º',
            '–ø': '–ø', 'n': '–ø', 'œÄ': '–ø',
            '–∏': '–∏', 'u': '–∏', 'Œπ': '–∏',
            '–ª': '–ª', 'l': '–ª', 'L': '–ª',
            '–≥': '–≥', 'r': '–≥', 'R': '–≥',
            '–¥': '–¥', '√∞': '–¥',
            '–∑': '–∑', '3': '–∑',
            '—á': '—á', '4': '—á',
            '–±': '–±', '6': '–±',
            '—è': '—è', 'q': '—è',
        }

        text = text.lower()
        text = re.sub(r"[^\w\s]", "", text)  # –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó
        return "".join(replace_map.get(c, c) for c in text)

    async def filtercmd(self, message):
        """–î–æ–¥–∞—î —Ñ—ñ–ª—å—Ç—Ä. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: .filter —Å–ª–æ–≤–æ"""
        filters = self.db.get("Filters", "filters", {})
        key = utils.get_args_raw(message).strip().lower()
        chatid = str(message.chat_id)

        if not key:
            return await message.edit("<b>–í–≤–µ–¥–∏ —Ñ—ñ–ª—å—Ç—Ä.</b>")

        if chatid not in filters:
            filters[chatid] = {}

        if key in filters[chatid]:
            return await message.edit("<b>–¢–∞–∫–∏–π —Ñ—ñ–ª—å—Ç—Ä –≤–∂–µ —î.</b>")

        filters[chatid][key] = True
        self.db.set("Filters", "filters", filters)
        await message.edit(f'<b>‚úÖ –§—ñ–ª—å—Ç—Ä "{key}" –¥–æ–¥–∞–Ω–æ.</b>')

    async def stopcmd(self, message):
        """–í–∏–¥–∞–ª—è—î —Ñ—ñ–ª—å—Ç—Ä. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: .stop —Å–ª–æ–≤–æ"""
        filters = self.db.get("Filters", "filters", {})
        key = utils.get_args_raw(message).strip()
        chatid = str(message.chat_id)

        if chatid not in filters or not key:
            return await message.edit("<b>‚ùå –ù–µ–º–∞—î —Ç–∞–∫–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä—É.</b>")

        if key in filters[chatid]:
            filters[chatid].pop(key)
            self.db.set("Filters", "filters", filters)
            await message.edit(f'<b>üóë –§—ñ–ª—å—Ç—Ä "{key}" –≤–∏–¥–∞–ª–µ–Ω–æ.</b>')
        else:
            await message.edit(f'<b>‚ùå –§—ñ–ª—å—Ç—Ä "{key}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</b>')

    async def stopallcmd(self, message):
        """–í–∏–¥–∞–ª—è—î —É—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –∑ —á–∞—Ç—É"""
        filters = self.db.get("Filters", "filters", {})
        chatid = str(message.chat_id)

        if chatid in filters:
            filters.pop(chatid)
            self.db.set("Filters", "filters", filters)
            await message.edit("<b>üßπ –£—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–æ.</b>")
        else:
            await message.edit("<b>üì≠ –£ —Ü—å–æ–º—É —á–∞—Ç—ñ –Ω–µ–º–∞—î —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.</b>")

    async def filterscmd(self, message):
        """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤"""
        filters = self.db.get("Filters", "filters", {})
        chatid = str(message.chat_id)

        if chatid not in filters or not filters[chatid]:
            return await message.edit("<b>üì≠ –ù–µ–º–∞—î —Ñ—ñ–ª—å—Ç—Ä—ñ–≤.</b>")

        msg = "\n".join(f"‚Ä¢ {k}" for k in filters[chatid])
        await message.edit(f"<b>üìå –§—ñ–ª—å—Ç—Ä–∏:\n\n{msg}</b>")

    async def watcher(self, message):
        try:
            filters = self.db.get("Filters", "filters", {})
            chatid = str(message.chat_id)
            if chatid not in filters or not message or not message.raw_text:
                return

            text = self.normalize_text(message.raw_text)

            for f in filters[chatid]:
                norm_f = self.normalize_text(f)
                if norm_f in text:
                    await message.delete()
                    break
        except Exception as e:
            print(f"[FiltersMod] Watcher error: {e}")
